{"name":"Levelup","tagline":"Official Levelup gem modified to support Ruby 1.8.7 ","body":"# LevelUp Ruby SDK\r\n\r\nEarly alpha version of the LevelUp Ruby SDK - designed for e-commerce and online\r\nfood ordering sites to provide the option to easily pay with a LevelUp account.\r\n\r\nSubject to drastic change without warning for duration of alpha period.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'levelup'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install levelup\r\n\r\n## Documentation\r\n\r\n[![Documentation](http://img.shields.io/badge/docs-rdoc.info-blue.svg)](http://rubydoc.org/gems/levelup/frames)\r\n\r\n## Usage\r\n\r\n### Do once per LevelUp-powered application:\r\n-  Create an instance of the LevelUp client and authenticate it.\r\n\r\n```ruby\r\napi = Levelup::Api.new\r\n\r\n# While testing:\r\nLevelup::Configuration.base_api_url = 'https://sandbox.thelevelup.com/'\r\n\r\n# For production, these should be ENV variables:\r\napi_key = '23eef8c2895ce66eb4500bb5e324b200f5339e6fe6d8665f6de0205f43f3b563'\r\nclient_secret = '4d71e958b9fb6a62af624390c4ef394df15d168ea12b3b12735643ff0694520f'\r\n\r\nauth_response = api.access_tokens.create_for_app(\r\n  :api_key => api_key,\r\n  :client_secret => client_secret)\r\n\r\napi.app_access_token = auth_response.token\r\n```\r\n\r\n### Do once per merchant account\r\n\r\n- Authenticate merchants using LevelUp email and password\r\n\r\n```ruby\r\nusername = 'sandboxdevexample@thelevelup.com'\r\npassword = 'fod2yau4flu6vok6'\r\n\r\nmerchant_token = api.access_tokens.create_for_merchant(\r\n  :api_key => api_key, :username => username, :password => password)\r\n```\r\n\r\n### Do for each merchant location\r\n\r\n- Prompt merchant to map LevelUp locations to each of their online ordering locations\r\n\r\n```ruby\r\nmerchant_id = merchant_token.merchant_id\r\nmerchant_access_token = merchant_token.token\r\nlocations_response = api.merchants(merchant_id).locations.list(merchant_access_token)\r\n\r\n# For testing purposes, we'll use the first location\r\n\r\nlocation = locations_response.locations[0]\r\nlocation_id = location.id\r\n```\r\n\r\n### Do for each customer\r\n\r\n- Ask a user for permission to make an order for them (alternatively you can use our\r\n[OpenID](http://developer.thelevelup.com/resources-and-guides/web-authentication-flow/) or\r\n[Oauth2](http://developer.thelevelup.com/resources-and-guides/web-authorization-flow/) flows). \r\nFor more information on available permissions, see the\r\n[LevelUp permissions list](http://developer.thelevelup.com/resources-and-guides/permissions-list/)\r\n\r\n```ruby\r\napi.apps.permissions_requests.create(\r\n  :email => 'user@email.com',\r\n  :permission_keynames => ['create_orders', 'read_qr_code'])\r\n# wait for the user to approve the request. you will receive a user\r\n# access token in the same manner as above.\r\n```\r\n\r\n- Retrieve a user's QR code\r\n\r\n```ruby\r\nqr_code_response = api.qr_codes.get(customer_token)\r\n\r\nqr_code = qr_code_response.code\r\n```\r\n\r\n- Create an order for the specified merchant.\r\n\r\n```ruby\r\n\r\n# Check for merchant_funded_credit\r\n\r\ndiscount_response = api.locations(location_id).merchant_funded_credit.get(\r\n  qr_code, merchant_access_token)\r\n\r\n# Define the details from the check\r\n\r\ncheck_total_due_including_tax = 110 # Total amount of payment due on the check (in cents)\r\nexempted_item_total = 0 # Total amount of exempted (milk, cigarettes etc) items (in cents)\r\nspend_amount_requested = 110 # Total amount of payment requested from LevelUp (in cents)\r\ntax_amount_due = 10 # Total tax amount due on check (in cents)\r\nidentifier_from_merchant = '01234' # Unique check identifier in your platform (ie, check ID)\r\ncheck_items_array = [ # Array of all items on the check\r\n    {\r\n      :charged_price => 350,\r\n      :description => 'Non-poisonous, supplies vital nutrients',\r\n      :name => 'Food',\r\n      :quantity => 1,\r\n      :sku => '123abc',\r\n      :category => 'Edible Things',\r\n      :standard_price => 350\r\n    }\r\n    # more items can go here\r\n  ]\r\n\r\n# Determine the amount of discount to apply to the check\r\n\r\ncredit_to_apply = Levelup::Utils::PaymentCalculator.levelup_discount_to_apply(\r\n  :check_total_due_including_tax => check_total_due_including_tax,\r\n  :exempted_item_total => exempted_item_total,\r\n  :merchant_funded_credit_available => discount_response.discount_amount,\r\n  :payment_amount_requested => spend_amount_requested,\r\n  :tax_amount_due => tax_amount_due\r\n)\r\n\r\n# Apply the discount to the check\r\n\r\n# Create a new order request\r\norder_response = api.orders.create(\r\n  :identifier_from_merchant => identifier_from_merchant,\r\n  :location_id => location_id,\r\n  :spend_amount => spend_amount_requested,\r\n  :items => check_items_array,\r\n  :merchant_access_token => merchant_access_token,\r\n  :user_access_token => qr_code)\r\n\r\ncalculator = Levelup::Utils::PaymentCalculator.new(\r\n  :discount_applied => credit_to_apply,\r\n  :gift_card_credit_available => discount_response.gift_card_amount,\r\n  :spend_amount_returned_from_levelup => order_response.spend_amount,\r\n  :tip_returned_from_levelup => order_response.tip_amount\r\n)\r\n\r\n# Get relevant amounts to apply to check and apply as necessary\r\n\r\ncalculator.gift_card_payment_to_apply\r\ncalculator.gift_card_tip_to_apply\r\ncalculator.levelup_payment_to_apply\r\ncalculator.levelup_tip_to_apply\r\n\r\n# Additional values are also available (if desired)\r\n\r\ncalculator.total_gift_card_payment_to_apply_including_tip\r\ncalculator.gift_card_remaining_balance_after_payment\r\ncalculator.total_levelup_payment_to_apply_including_tip\r\n\r\n# Apply each payment to the check and close the check (assuming balance due is 0)\r\n```\r\n\r\nThe LevelUp Ruby SDK mirrors the API as closely as possible, so the call for any given endpoint\r\ncan be inferred from its URL.\r\n\r\nFor instance:\r\n\r\n```ruby\r\napi.apps.permissions_requests.create # points to /v15/apps/permissions_requests/ POST\r\napi.user_addresses.list              # points to /v15/user_addresses/ GET\r\napi.orders(uuid).refund              # points to /v15/orders/:uuid/refund/ POST\r\n```\r\n\r\n## Pagination\r\n\r\nSome requests that return large lists are paginated and only return a small number of values per\r\nrequest. The LevelUp Ruby SDK handles this by allowing you to request the next page from the\r\npaginated response.\r\n\r\nFor instance:\r\n\r\n```ruby\r\nlocs_response = api.apps(123).locations.list # gets a page of locations associated with an app\r\nlocs_response.locations # => [location 1, location 2...location 10]\r\n\r\nlocs_response.next_page? # => true if there is another page of results to load\r\n\r\nnext_page_response = locs_response.next # gets the next page of results\r\n```\r\n\r\n## Errors\r\n\r\nIf the LevelUp API returns a 422 error response, it will also return an object containing useful\r\ninfo about the error. It can be handled like so:\r\n\r\n```ruby\r\nerror = api.access_tokens.create_for_app(\r\n  :api_key => 'bogus_api_key',\r\n  :client_secret => 'bogus_client_secret'\r\n)\r\n\r\nputs error.success? # => false\r\nputs error.headers['Cache-Control'] # => 'private' (Map of header names to values)\r\nputs error.status_code # => 422\r\nputs error.errors[0] # => object with message, object, property values\r\nputs error.errors[0].message # => 'API Key is invalid.'\r\nputs error.errors[0].property # => 'api_key'\r\n```\r\n\r\n## Contributing\r\n\r\n-  Fork it (https://github.com/kundankumar/levelup/fork)\r\n-  Create your feature branch (`git checkout -b my-new-feature`)\r\n-  Ensure that Rubocop gives you a clean bill of health\r\n```\r\ncd path/to/my/ruby-sdk-folder\r\nbundle exec rubocop\r\n```\r\n-  Ensure that all RSpec tests pass (and write some for your code!)\r\n```\r\ncd path/to/my/ruby-sdk-folder\r\nbundle exec rspec\r\n```\r\n-  Commit your changes (`git commit -am 'Add some feature'`)\r\n-  Push to the branch (`git push origin my-new-feature`)\r\n-  Create a new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}